import numpy as np

def parse(nkpts: int, path: str = "./") -> tuple[list, list, list]:
    """parse LOWF_K_*.txt file generated by ABACUS with input parameter out_wfc_lcao 1.

    Args:
        nkpts (int): number of k-points
    """
    wfc = []
    kpoints = []
    energies = []
    if path[-1] != "/":
        path += "/"
    for ik in range(1, nkpts+1):
        fname = path + f"LOWF_K_{ik}.txt"
        wfc_k = []
        energies_k = []
        wfc_k_b = []
        with open(fname, "r") as f:
            lines = f.readlines()
        for line in lines:
            line = line.strip()
            if line.endswith("(index of k points)"):
                #print("kpoint index:", line)
                pass
            elif line.endswith("(number of bands)"):
                #print("number of bands:", line)
                pass
            elif line.endswith("(number of orbitals)"):
                #print("number of orbitals:", line)
                pass
            elif line.endswith("(band)"):
                #print("band index:", line)
                pass
            elif line.endswith("(Ry)"):
                energies_k.append(float(line.split()[0]))
                pass
            elif line.endswith("(Occupations)"):
                occ = float(line.split()[0])
                if len(wfc_k_b) > 0:
                    # group every two elements into a complex number
                    wfc_k_b = np.array(wfc_k_b)
                    wfc_k_b = wfc_k_b[::2] + 1j * wfc_k_b[1::2]
                    wfc_k.append(wfc_k_b)
                wfc_k_b = []
            else:
                num_valid_words = len(line.split())
                if num_valid_words == 3:
                    #print("kpoint coordinates:", line)
                    kpoints.append(np.array([float(word) for word in line.split()]))
                else:
                    for coeff in line.strip().split(): # remove leading and trailing whitespaces
                        wfc_k_b.append(float(coeff))
        # last band
        wfc_k_b = np.array(wfc_k_b)
        wfc_k_b = wfc_k_b[::2] + 1j * wfc_k_b[1::2]
        wfc_k.append(wfc_k_b)

        wfc.append(np.array(wfc_k))
        energies.append(np.array(energies_k))

    return wfc, kpoints, energies

if __name__ == "__main__":
    print(parse(8, path = "./examples/input/"))